{"version":3,"sources":["App.jsx","settings/colors.js","settings/util.js","dataRange/CoronaInfo.js","serviceWorker.js","index.js"],"names":["data","colorScale","color","value","range","scaleLinear","domain","interpolate","interpolateCubehelix","gamma","scale","getColorArray","array","Object","values","rgb","CoronaInfo","props","state","className","this","children","React","Component","INITIAL_VIEW_STATE","longitude","latitude","zoom","maxZoom","minZoom","pitch","bearing","App","render","document","title","axios","all","get","then","spread","USAs","World","WorldData","locations","USData","concat","setState","catch","error","console","log","hoveredObject","pointerX","pointerY","dataType","style","position","zIndex","pointerEvents","left","top","country","province","confirmed","deaths","dataNoZero","map","location","recovered","latest","coordinates","parseFloat","filter","cases","elevation","layers","ColumnLayer","id","pickable","material","extruded","transitions","getElevation","duration","easing","easeBackOut","enter","getPosition","d","diskResolution","radius","offset","elevationScale","getFillColor","onHover","info","object","x","y","initialViewState","controller","mapStyle","mapboxApiAccessToken","renderTooltip","bind","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","onUpdate","onSuccess","ReactDOM","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"+NAsBIA,E,oJCtBSC,EAAa,CACxB,CAAC,UAAW,UAAW,UAAW,UAAU,UAAU,YCM3CC,EAAQ,SAACC,EAAOC,GAM3B,OALcC,cACXC,OAAO,CAAC,EAAG,IAAM,IAAK,IAAM,MAC5BF,MAAMH,EAAW,IACjBM,YAAYC,IAAqBC,MAAM,GAEnCC,CAAMP,IAGFQ,EAAgB,SAAAT,GAC3B,IAAMU,EAAQC,OAAOC,OAAOC,YAAIb,IAGhC,OAFAU,EAAM,GAAgB,IAAXA,EAAM,GAEVA,GCDMI,E,YAhBb,WAAYC,GAAQ,IAAD,8BACjB,+CAEKC,MAAQ,GAHI,E,sEAOjB,OACE,yBAAKC,UAAU,eACb,yBAAKA,UAAU,iBAAiBC,KAAKH,MAAMI,e,GAV1BC,IAAMC,W,0BHUzBC,EAAqB,CACzBC,UAAW,SACXC,SAAU,QACVC,KAAM,EACNC,QAAS,GACTC,QAAS,EACTC,MAAO,GACPC,QAAS,GAIUC,E,YAGnB,WAAYf,GAAQ,IAAD,8BACjB,+CAHFC,MAAQ,GAKN,EAAKA,MAAQ,CACXlB,KAAM,GACNiC,QAAQ,GALO,E,iFAYE,IAAD,OAElBC,SAASC,MAAQ,oBAEjBC,IAAMC,IAAI,CACRD,IAAME,IAAI,0EACVF,IAAME,IAAI,2EACTC,KAAKH,IAAMI,QAAO,SAACC,EAAMC,GACxB,IAAIC,EAAYD,EAAM1C,KAAK4C,WAAa,GACpCC,EAASJ,EAAKzC,KAAK4C,WAAa,GACpC5C,EAAO2C,EAAUG,OAAOD,GACxB,EAAKE,SAAS,CAAE/C,KAAMA,QACpBgD,OAAM,SAACC,GACW,OAApBC,QAAQC,IAAIF,GAAe,Q,sCAKhB,IAAD,EACwC7B,KAAKF,OAAS,GAA9DkC,EADQ,EACRA,cAAeC,EADP,EACOA,SAAUC,EADjB,EACiBA,SAAUC,EAD3B,EAC2BA,SACzC,OACEH,GACE,yBACEjC,UAAU,aACVqC,MAAO,CACLC,SAAU,WACVC,OAAQ,IACRC,cAAe,OACfC,KAAMP,EACNQ,IAAKP,IAEP,wBAAInC,UAAU,qBACXiC,EAAcU,UAAYV,EAAcW,UACvC,4BACE,8BAAOX,EAAcW,WAGzB,4BAAI,8BAAOX,EAAcU,UACX,cAAbP,GACC,wBAAIC,MAAO,CAAEtD,MAAO,WAApB,iCAA+DkD,EAAcY,WAEjE,WAAbT,GACC,wBAAIC,MAAO,CAAEtD,MAAO,QAApB,8BAAyDkD,EAAca,Y,+BAazE,IAAD,OACPjE,EAAOoB,KAAKF,MAAMlB,KAElBkD,QAAQC,IAAInD,GAYZ,IAAMkE,EAXYlE,EAAKmE,KAAI,SAAUC,GACnC,MAAO,CACLC,UAAWD,EAASE,OAAOD,UAC3BJ,OAAQG,EAASE,OAAOL,OACxBD,UAAWI,EAASE,OAAON,UAC3BD,SAAUK,EAASL,SACnBD,QAASM,EAASN,QAClBS,YAAa,CAACC,WAAWJ,EAASG,YAAY9C,WAAY+C,WAAWJ,EAASG,YAAY7C,eAI3D+C,QAAO,SAAAC,GAAK,OAAKA,EAAML,UAAY,GAAKK,EAAMT,OAAS,GAAKS,EAAMV,UAAY,KAC3GW,EAAYtE,YAAY,CAAC,EAAG,IAAK,CAAC,EAAG,KAErCuE,EAAS,CACb,IAAIC,IAAJ,aACEC,GAAI,iBACJ9E,KAAMkE,GACH9C,KAAKH,MAHV,CAIE8D,UAAU,EACVC,UAAU,EACVC,UAAU,EACVC,YAAa,CACXC,aAAc,CACZC,SAAU,IACVC,OAAQC,IACRC,MAAO,SAAApF,GAAK,MAAI,CAAC,OAGrBqF,YAAa,SAAAC,GAAC,OAAIA,EAAElB,aACpBmB,eAAgB,EAChBC,OAlBkB,KAmBlBC,OAAQ,CAAC,EAAG,GACZC,eAAgB,GAChBC,aAAc,SAAAL,GAAC,OAAI9E,EAAcT,EAAMuF,EAAExB,UACzCkB,aAAc,SAAAM,GAAC,OAAId,EAAUc,EAAExB,SAC/B8B,QAAS,SAAAC,GAAI,OACX,EAAKjD,SAAS,CACZK,cAAe4C,EAAKC,OACpB1C,SAAU,SACVF,SAAU2C,EAAKE,EACf5C,SAAU0C,EAAKG,QAGrB,IAAItB,IAAJ,aACEC,GAAI,iBACJ9E,KAAMkE,GACH9C,KAAKH,MAHV,CAIE8D,UAAU,EACVE,UAAU,EACVC,YAAa,CACXC,aAAc,CACZC,SAAU,IACVC,OAAQC,IACRC,MAAO,SAAApF,GAAK,MAAI,CAAC,OAGrBqF,YAAa,SAAAC,GAAC,OAAIA,EAAElB,aACpBmB,eAAgB,IAChBC,OA9CkB,KA+ClBC,OAAQ,CAAC,EAAG,GACZC,eAAgB,GAChBC,aAAc,SAAAL,GAAC,OAAI9E,EAAcT,EAAMuF,EAAEzB,aACzCmB,aAAc,SAAAM,GAAC,OAAId,EAAUc,EAAEzB,YAC/B+B,QAAS,SAAAC,GAAI,OACX,EAAKjD,SAAS,CACZK,cAAe4C,EAAKC,OACpB1C,SAAU,YACVF,SAAU2C,EAAKE,EACf5C,SAAU0C,EAAKG,SAKvB,OACE,6BACE,kBAAC,IAAD,CAAQvB,OAAQA,EAAQwB,iBAAkB5E,EAAoB6E,YAAY,GACxE,kBAAC,IAAD,CAAWC,SAnKJ,oDAmKwBC,qBApKb,8FAqKjBnF,KAAKoF,cAAcC,KAAKrF,OAE3B,kBAAC,EAAD,KACE,yBAAKD,UAAU,cACb,8CACA,4BACE,0CACA,8C,GA/JmBG,IAAMC,WIXjCmF,G,OAAcC,QACW,cAA7BC,OAAOxC,SAASyC,UAEe,UAA7BD,OAAOxC,SAASyC,UAEhBD,OAAOxC,SAASyC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTzE,MAAK,SAAA8E,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrG,QACfgG,UAAUC,cAAcd,YAI1BnD,QAAQC,IACN,gHAKE8D,GAAUA,EAAOS,UACnBT,EAAOS,SAASL,KAMlBnE,QAAQC,IAAI,sCAGR8D,GAAUA,EAAOU,WACnBV,EAAOU,UAAUN,WAO5BrE,OAAM,SAAAC,GACLC,QAAQD,MAAM,4CAA6CA,MCzFjE2E,IAAS3F,OAAO,kBAAC,EAAD,MAASC,SAAS2F,eAAe,SDe1C,SAAkBZ,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIY,IAAIC,eAAwBnB,OAAOxC,SAAS4D,MACpDC,SAAWrB,OAAOxC,SAAS6D,OAIvC,OAGFrB,OAAOsB,iBAAiB,QAAQ,WAC9B,IAAMlB,EAAK,UAAMe,eAAN,sBAEPrB,IAgEV,SAAiCM,EAAOC,GAEtCkB,MAAMnB,GACHzE,MAAK,SAAA6F,GAEJ,IAAMC,EAAcD,EAASE,QAAQhG,IAAI,gBAEnB,MAApB8F,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CtB,UAAUC,cAAcsB,MAAMlG,MAAK,SAAA8E,GACjCA,EAAaqB,aAAanG,MAAK,WAC7BqE,OAAOxC,SAASuE,eAKpB5B,EAAgBC,EAAOC,MAG1BjE,OAAM,WACLE,QAAQC,IACN,oEArFAyF,CAAwB5B,EAAOC,GAI/BC,UAAUC,cAAcsB,MAAMlG,MAAK,WACjCW,QAAQC,IACN,gHAMJ4D,EAAgBC,EAAOC,OCtC/BE,K","file":"static/js/main.d20da4fa.chunk.js","sourcesContent":["import React from \"react\";\nimport DeckGL, { ColumnLayer } from \"deck.gl\";\nimport { StaticMap } from \"react-map-gl\";\nimport { scaleLinear } from \"d3-scale\";\nimport { easeBackOut } from 'd3';\nimport { color, getColorArray } from \"./settings/util\";\nimport CoronaInfo from \"./dataRange/CoronaInfo\";\nimport \"@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions.css\";\nimport axios from \"axios\";\n\nconst MAPBOX_ACCESS_TOKEN = \"pk.eyJ1IjoidWd1cjIyMiIsImEiOiJjazZvOXVibW8wMHR3M21xZnE0cjZhbHI0In0.aCGjvePsRwkvQyNBjUEkaw\";\nconst mapStyle = \"mapbox://styles/ugur222/ck74tfdlm22dm1in0t5zxxvgq\";\nconst INITIAL_VIEW_STATE = {\n  longitude: 117.2264,\n  latitude: 31.8257,\n  zoom: 4,\n  maxZoom: 16,\n  minZoom: 3,\n  pitch: 60,\n  bearing: 5\n};\n\nlet data\nexport default class App extends React.Component {\n  state = {};\n\n  constructor(props) {\n    super();\n\n    this.state = {\n      data: [],\n      render: false\n    };\n\n  }\n\n\n\n  componentDidMount() {\n\n    document.title = \"Corona spread viz\";\n\n    axios.all([\n      axios.get('https://coronavirus-tracker-api.herokuapp.com/v2/locations?source=csbs'),\n      axios.get('https://coronavirus-tracker-api.herokuapp.com/v2/locations?source=jhu')])\n      .then(axios.spread((USAs, World) => {\n        let WorldData = World.data.locations || [];\n        let USData = USAs.data.locations || [];\n        data = WorldData.concat(USData)\n        this.setState({ data: data });\n      })).catch((error) => {\n        console.log(error); return [];\n      })\n  }\n\n\n  renderTooltip() {\n    let { hoveredObject, pointerX, pointerY, dataType } = this.state || {};\n    return (\n      hoveredObject && (\n        <div\n          className=\"data-hover\"\n          style={{\n            position: \"absolute\",\n            zIndex: 1000,\n            pointerEvents: \"none\",\n            left: pointerX,\n            top: pointerY\n          }}>\n          <ul className=\"hoveredObjectData\">\n            {hoveredObject.country !== hoveredObject.province && (\n              <li>\n                <span>{hoveredObject.province}</span>\n              </li>\n            )}\n            <li><span>{hoveredObject.country}</span></li>\n            {dataType === \"confirmed\" && (\n              <li style={{ color: \"orange\" }}> total infections(confirmed): {hoveredObject.confirmed}</li>\n            )}\n            {dataType === \"deaths\" && (\n              <li style={{ color: \"red\" }}> total  deaths(confirmed): {hoveredObject.deaths}</li>\n            )}\n          </ul>\n        </div>\n      )\n    );\n  }\n\n\n\n\n\n\n  render() {\n    data = this.state.data;\n    let collectionCases = [];\n    console.log(data);\n    collectionCases = data.map(function (location) {\n      return {\n        recovered: location.latest.recovered,\n        deaths: location.latest.deaths,\n        confirmed: location.latest.confirmed,\n        province: location.province,\n        country: location.country,\n        coordinates: [parseFloat(location.coordinates.longitude), parseFloat(location.coordinates.latitude)]\n      };\n    });\n\n    const dataNoZero = collectionCases.filter(cases => (cases.recovered > 0 || cases.deaths > 0 || cases.confirmed > 0));\n    const elevation = scaleLinear([0, 10], [0, 10]);\n    const radiusColumns = 15000;\n    const layers = [\n      new ColumnLayer({\n        id: \"column-layer-2\",\n        data: dataNoZero,\n        ...this.props,\n        pickable: true,\n        material: true,\n        extruded: true,\n        transitions: {\n          getElevation: {\n            duration: 2000,\n            easing: easeBackOut,\n            enter: value => [60]\n          },\n        },\n        getPosition: d => d.coordinates,\n        diskResolution: 4,\n        radius: radiusColumns,\n        offset: [5, 3],\n        elevationScale: 50,\n        getFillColor: d => getColorArray(color(d.deaths, [0, 55])),\n        getElevation: d => elevation(d.deaths),\n        onHover: info =>\n          this.setState({\n            hoveredObject: info.object,\n            dataType: \"deaths\",\n            pointerX: info.x,\n            pointerY: info.y\n          }),\n      }),\n      new ColumnLayer({\n        id: \"column-layer-3\",\n        data: dataNoZero,\n        ...this.props,\n        pickable: true,\n        extruded: true,\n        transitions: {\n          getElevation: {\n            duration: 2000,\n            easing: easeBackOut,\n            enter: value => [10]\n          },\n        },\n        getPosition: d => d.coordinates,\n        diskResolution: 100,\n        radius: radiusColumns,\n        offset: [3, 1],\n        elevationScale: 50,\n        getFillColor: d => getColorArray(color(d.confirmed, [0, 55])),\n        getElevation: d => elevation(d.confirmed),\n        onHover: info =>\n          this.setState({\n            hoveredObject: info.object,\n            dataType: \"confirmed\",\n            pointerX: info.x,\n            pointerY: info.y\n          }),\n      }),\n    ];\n\n    return (\n      <div>\n        <DeckGL layers={layers} initialViewState={INITIAL_VIEW_STATE} controller={true} >\n          <StaticMap mapStyle={mapStyle} mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN} />\n          {this.renderTooltip.bind(this)}\n        </DeckGL>\n        <CoronaInfo>\n          <div className=\"legendData\">\n            <p>Legend COVID-19</p>\n            <ul>\n              <li>Infections</li>\n              <li>Deaths</li>\n            </ul>\n          </div>\n        </CoronaInfo>\n      </div>\n    );\n  }\n}\n","export const colorScale = [\n  [\"#fee5d9\" ,\"#fcbba1\", \"#fc9272\", \"#fb6a4a\",\"#de2d26\",\"#a50f15\"]\n];\n","import { rgb } from \"d3-color\";\n\nimport { scaleLinear } from \"d3-scale\";\nimport { interpolateCubehelix } from \"d3-interpolate\";\n\nimport { colorScale } from \"./colors.js\";\n\nexport const color = (value, range) => {\n  const scale = scaleLinear()\n    .domain([0, 1000, 3000,8000, 70000])\n    .range(colorScale[0])\n    .interpolate(interpolateCubehelix.gamma(3))\n\n  return scale(value);\n};\n\nexport const getColorArray = color => {\n  const array = Object.values(rgb(color));\n  array[3] = array[3] * 255;\n\n  return array;\n};\n","import React from \"react\";\n\nclass CoronaInfo extends React.Component {\n  constructor(props) {\n    super();\n\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"info-Corona\">\n        <div className=\"content-panel\">{this.props.children}</div>\n          \n      </div>\n    );\n  }\n}\n\nexport default CoronaInfo;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport App from \"./App\";\nimport \"@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions.css\"; // Updating node module will keep css up to date.\nimport \"./css/index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}