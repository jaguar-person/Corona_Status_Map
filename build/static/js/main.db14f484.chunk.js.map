{"version":3,"sources":["dataRange/CoronaInfo.js","App.jsx","serviceWorker.js","index.js"],"names":["CoronaInfo","props","state","className","this","children","React","Component","INITIAL_VIEW_STATE","longitude","latitude","zoom","maxZoom","minZoom","pitch","bearing","App","data","render","document","title","axios","get","then","response","status","Error","setState","locations","catch","error","console","log","hoveredObject","pointerX","pointerY","dataType","style","position","zIndex","pointerEvents","left","top","country","province","color","recovered","confirmed","deaths","dataNoZero","map","location","latest","coordinates","parseFloat","filter","cases","elevation","scaleLinear","elevation2","layers","ColumnLayer","id","dataTransform","d","f","pickable","extruded","transitions","getElevation","duration","easing","easeBackOut","enter","value","getPosition","diskResolution","radius","offset","elevationScale","getFillColor","onHover","info","object","x","y","initialViewState","controller","mapStyle","mapboxApiAccessToken","renderTooltip","bind","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","onUpdate","onSuccess","ReactDOM","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.db14f484.chunk.js","sourcesContent":["import React from \"react\";\n\nclass CoronaInfo extends React.Component {\n  constructor(props) {\n    super();\n\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"info-airQuality\">\n        <div className=\"content-airQuality\">{this.props.children}</div>\n          \n      </div>\n    );\n  }\n}\n\nexport default CoronaInfo;\n","import React from \"react\";\nimport DeckGL, { ColumnLayer } from \"deck.gl\";\nimport { StaticMap } from \"react-map-gl\";\nimport { scaleLinear } from \"d3-scale\";\nimport { easeBackOut } from 'd3';\nimport CoronaInfo from \"./dataRange/CoronaInfo\";\nimport \"@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions.css\";\nimport axios from \"axios\";\n\nconst MAPBOX_ACCESS_TOKEN = \"pk.eyJ1IjoidWd1cjIyMiIsImEiOiJjazZvOXVibW8wMHR3M21xZnE0cjZhbHI0In0.aCGjvePsRwkvQyNBjUEkaw\";\nconst mapStyle = \"mapbox://styles/ugur222/ck74tfdlm22dm1in0t5zxxvgq\";\nconst INITIAL_VIEW_STATE = {\n  longitude: 117.2264,\n  latitude: 31.8257,\n  zoom: 4,\n  maxZoom: 16,\n  minZoom: 3,\n  pitch: 60,\n  bearing: 5\n};\n\nlet data\nexport default class App extends React.Component {\n  state = {};\n\n  constructor(props) {\n    super();\n\n    this.state = {\n      data: [],\n      render: false\n    };\n\n  }\n\n  componentDidMount() {\n\n    document.title = \"Corona spread viz\";\n    axios\n      .get(\n        `https://coronavirus-tracker-api.herokuapp.com/v2/locations`\n      )\n      .then(response => {\n        if (response.status === 200 && response != null) {\n          this.setState({\n            data: response.data.locations,\n          });\n\n\n\n        } else {\n          throw new Error(\"no data available\");\n        }\n      })\n      .catch(function (error) {\n        console.log(error);\n        return [];\n      });\n  }\n\n  renderTooltip() {\n    let { hoveredObject, pointerX, pointerY, dataType } = this.state || {};\n    return (\n      hoveredObject && (\n        <div\n          className=\"data-hover\"\n          style={{\n            position: \"absolute\",\n            zIndex: 1000,\n            pointerEvents: \"none\",\n            left: pointerX,\n            top: pointerY\n          }}>\n          <ul className=\"hoveredObjectData\">\n            {hoveredObject.country !== hoveredObject.province && (\n              <li>\n                <span>{hoveredObject.province}</span>\n              </li>\n            )}\n            <li><span>{hoveredObject.country}</span></li>\n            {dataType === \"recovered\" && (\n              <li style={{ color: \"green\" }}> total recovered(confirmed): {hoveredObject.recovered}</li>\n            )}\n            {dataType === \"confirmed\" && (\n              <li style={{ color: \"orange\" }}> total infections(confirmed): {hoveredObject.confirmed}</li>\n            )}\n            {dataType === \"deaths\" && (\n              <li style={{ color: \"red\" }}> total  deaths(confirmed): {hoveredObject.deaths}</li>\n            )}\n          </ul>\n        </div>\n      )\n    );\n  }\n\n\n\n\n\n\n  render() {\n    data = this.state.data;\n    let collectionCases = [];\n\n    collectionCases = data.map(function (location) {\n      return {\n        recovered: location.latest.recovered,\n        deaths: location.latest.deaths,\n        confirmed: location.latest.confirmed,\n        province: location.province,\n        country: location.country,\n        coordinates: [parseFloat(location.coordinates.longitude), parseFloat(location.coordinates.latitude)]\n      };\n    });\n\n    const dataNoZero = collectionCases.filter(cases => (cases.recovered > 0 || cases.deaths > 0 || cases.confirmed > 0));\n    const elevation = scaleLinear([0, 10], [0, 40]);\n    const elevation2 = scaleLinear([0, 10], [0, 50]);\n    const radiusColumns = 10000;\n    const layers = [\n      new ColumnLayer({\n        id: \"column-layer\",\n        data: dataNoZero,\n        dataTransform: d => d.locations.filter(f => f.deaths >= 0),\n        ...this.props,\n        pickable: true,\n        extruded: true,\n        transitions: {\n          getElevation: {\n            duration: 2000,\n            easing: easeBackOut,\n            enter: value => [10]\n          },\n        },\n        getPosition: d => d.coordinates,\n        diskResolution: 100,\n        radius: radiusColumns,\n        offset: [1, 0],\n        elevationScale: 50,\n        getFillColor: d => [0, 129, d.recovered * 0, 255],\n        getElevation: d => elevation(d.recovered),\n        onHover: info =>\n          this.setState({\n            hoveredObject: info.object,\n            dataType: \"recovered\",\n            pointerX: info.x,\n            pointerY: info.y\n          }),\n      }),\n      new ColumnLayer({\n        id: \"column-layer-2\",\n        data: dataNoZero,\n        ...this.props,\n        pickable: true,\n        extruded: true,\n        transitions: {\n          getElevation: {\n            duration: 2000,\n            easing: easeBackOut,\n            enter: value => [60]\n          },\n        },\n        getPosition: d => d.coordinates,\n        diskResolution: 100,\n        radius: radiusColumns,\n        offset: [5, 3],\n        elevationScale: 50,\n        getFillColor: d => [255, 0, d.deaths * 0, 255],\n        getElevation: d => elevation2(d.deaths),\n        onHover: info =>\n          this.setState({\n            hoveredObject: info.object,\n            dataType: \"deaths\",\n            pointerX: info.x,\n            pointerY: info.y\n          }),\n      }),\n      new ColumnLayer({\n        id: \"column-layer-3\",\n        data: dataNoZero,\n        ...this.props,\n        pickable: true,\n        extruded: true,\n        transitions: {\n          getElevation: {\n            duration: 2000,\n            easing: easeBackOut,\n            enter: value => [10]\n          },\n        },\n        getPosition: d => d.coordinates,\n        diskResolution: 100,\n        radius: radiusColumns,\n        offset: [3, 1],\n        elevationScale: 50,\n        getFillColor: d => [255, 165, d.confirmed * 0, 255],\n        getElevation: d => elevation(d.confirmed),\n        onHover: info =>\n          this.setState({\n            hoveredObject: info.object,\n            dataType: \"confirmed\",\n            pointerX: info.x,\n            pointerY: info.y\n          }),\n      }),\n    ];\n\n    return (\n      <div>\n        <DeckGL layers={layers} initialViewState={INITIAL_VIEW_STATE} controller={true} >\n          <StaticMap mapStyle={mapStyle} mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN} />\n          {this.renderTooltip.bind(this)}\n        </DeckGL>\n        <CoronaInfo>\n          <div className=\"legendData\">\n            <p>Legend COVID-19</p>\n            <ul>\n              <li style={{ color: \"green\" }}>Recovered</li>\n              <li style={{ color: \"orange\" }}>infections</li>\n              <li style={{ color: \"red\" }}>Deaths</li>\n            </ul>\n          </div>\n        </CoronaInfo>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport App from \"./App\";\nimport \"@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions.css\"; // Updating node module will keep css up to date.\nimport \"./css/index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}